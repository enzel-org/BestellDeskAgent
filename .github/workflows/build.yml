name: Rust Release (Linux)

on:
  push:
    branches:
      - master
    paths:
      - "Cargo.toml"
      - "Cargo.lock"
      - "src/**"
      - ".github/workflows/release.yml"

permissions:
  contents: write

jobs:
  build-linux:
    name: Build BestellDeskAgent on Ubuntu
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout with full history (needed for tags)
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Install Rust stable toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      # 3) Cache Cargo and target for faster builds
      - name: Cache cargo/target
        uses: Swatinem/rust-cache@v2

      # 4) Run tests first (release, locked deps)
      - name: Test (release)
        run: cargo test --release --locked

      # 5) Build after tests (release, locked deps)
      - name: Build (release)
        run: cargo build --release --locked

      # 6) Read version from Cargo.toml via cargo metadata
      - name: Read version from Cargo.toml
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          VERSION="$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')"
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "TAG=v$VERSION" >> "$GITHUB_ENV"

      # 7) Create and push git tag v<version> if missing
      - name: Create tag from version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --tags
          if git rev-parse "${TAG}" >/dev/null 2>&1; then
            echo "Tag ${TAG} already exists. Skipping creation."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag -a "${TAG}" -m "Release ${TAG}"
            git push origin "${TAG}"
          fi

      # 8) Prepare release assets (binary + checksum)
      - name: Prepare release assets
        run: |
          mkdir -p dist
          # Copy Linux binary and make a deterministic filename
          cp target/release/BestellDeskAgent dist/BestellDeskAgent-linux-x86_64
          (cd dist && sha256sum BestellDeskAgent-linux-x86_64 > BestellDeskAgent-linux-x86_64.sha256)
          ls -l dist

      # 9) Create GitHub Release (from tag) and upload assets
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          draft: false
          prerelease: false
          files: |
            dist/BestellDeskAgent-linux-x86_64
            dist/BestellDeskAgent-linux-x86_64.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
